type Tenant {
  id: ID!
  # Original
  name: String
  domain: String!
  tier: String!
  status: String!
  # Fields expected by portal
  displayName: String
  cellId: String
  createdAt: String
}

input Tenant_input {
  id: ID
  tenantId: String
  name: String
  domain: String
  tier: String
  status: String
  displayName: String
  cellId: String
  createdAt: String
}

type Cell {
  id: ID!
  name: String
  region: String!
  availabilityZone: String
  status: String!
  capacityTotal: Int!
  capacityUsed: Int!
}

extend type Query {
  tenants: [Tenant]
  tenant(id: ID!): Tenant
  cells: [Cell]
  cell(id: ID!): Cell
  operations: [Operation]
  operation(id: ID!): Operation
}

extend type Mutation {
  createTenant(item: Tenant_input!): Tenant
  updateTenant(id: ID!, item: Tenant_input!): Tenant
  deleteTenant(id: ID!): Boolean
  createCell(item: Cell_input!): Cell
  updateCell(id: ID!, item: Cell_input!): Cell
  deleteCell(id: ID!): Boolean
  createOperation(item: Operation_input!): Operation
  updateOperation(id: ID!, item: Operation_input!): Operation
  deleteOperation(id: ID!): Boolean
}

input Cell_input {
  id: ID
  cellId: String
  name: String
  region: String
  availabilityZone: String
  status: String
  capacityTotal: Int
  capacityUsed: Int
}

type Operation {
  id: ID!
  tenantId: String
  type: String!
  status: String!
  createdAt: String
  # Keep original alternative fields for compatibility
  timestamp: String
  details: String
}

input Operation_input {
  id: ID
  tenantId: String
  type: String
  status: String
  createdAt: String
  timestamp: String
  details: String
}
