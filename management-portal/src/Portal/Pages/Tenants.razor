@page "/tenants"
@using Microsoft.AspNetCore.Components.Forms
@inject Stamps.ManagementPortal.Services.IDataService Data

<h1>Tenants</h1>

<EditForm Model="editModel" OnValidSubmit="OnSaveAsync">
    <DataAnnotationsValidator />
    <div class="form-grid">
    <input @bind="editModel.Id" placeholder="Id" />
    <input @bind="editModel.DisplayName" placeholder="Display Name" />
    <input @bind="editModel.Domain" placeholder="Domain" />
    <input @bind="editModel.Tier" placeholder="Tier" />
    <input @bind="editModel.Status" placeholder="Status" />
    <input @bind="editModel.CellId" placeholder="CellId" />
    </div>
    <button type="submit">Save</button>
    <button type="button" @onclick="NewAsync">New</button>
</EditForm>

@if (loading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-warning">
        <strong>Data Service Unavailable:</strong> @errorMessage
        <br />
        <small>This feature requires the DAB (Data API Builder) service to be running and properly configured.</small>
        <br />
        <button class="btn btn-link" @onclick="RetryLoadAsync">Retry</button>
    </div>
}
else if (tenants is null || !tenants.Any())
{
    <div class="alert alert-info">
        <strong>No Tenants Found</strong>
        <br />
        <small>Create your first tenant using the form above.</small>
    </div>
}
else
{
    <table>
        <thead>
            <tr><th>Id</th><th>Name</th><th>Domain</th><th>Tier</th><th>Status</th><th>Cell</th></tr>
        </thead>
        <tbody>
        @foreach (var t in tenants)
        {
            <tr>
                <td>@t.Id</td>
                <td>@t.DisplayName</td>
                <td>@t.Domain</td>
                <td>@t.Tier</td>
                <td>@t.Status</td>
                <td>@t.CellId</td>
                <td>
                    <button @onclick="() => Edit(t)">Edit</button>
                    <button @onclick="() => DeleteAsync(t)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IReadOnlyList<Stamps.ManagementPortal.Models.Tenant>? tenants;
    private bool loading = true;
    private string? errorMessage;
    
    class TenantEdit
    {
        public string Id { get; set; } = string.Empty;
        public string DisplayName { get; set; } = string.Empty;
        public string Domain { get; set; } = string.Empty;
        public string Tier { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public string CellId { get; set; } = string.Empty;
    }

    private TenantEdit editModel = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadTenantsAsync();
    }

    async Task LoadTenantsAsync()
    {
        try
        {
            loading = true;
            errorMessage = null;
            tenants = await Data.GetTenantsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            tenants = new List<Stamps.ManagementPortal.Models.Tenant>();
        }
        finally
        {
            loading = false;
        }
    }

    async Task RetryLoadAsync()
    {
        await LoadTenantsAsync();
    }

    void Edit(Stamps.ManagementPortal.Models.Tenant t)
        => editModel = new TenantEdit { Id = t.Id, DisplayName = t.DisplayName, Domain = t.Domain, Tier = t.Tier, Status = t.Status, CellId = t.CellId };
    
    Task NewAsync() { editModel = new TenantEdit(); return Task.CompletedTask; }

    async Task OnSaveAsync()
    {
        try
        {
            var rec = new Stamps.ManagementPortal.Models.Tenant(editModel.Id, editModel.DisplayName, editModel.Domain, editModel.Tier, editModel.Status, editModel.CellId);
            if (tenants?.Any(x => x.Id == rec.Id) == true)
                await Data.UpdateTenantAsync(rec);
            else
            {
                // Reserve domain first to ensure global uniqueness
                var reserved = await Data.ReserveDomainAsync(editModel.Domain, editModel.Id);
                if (!reserved)
                {
                    errorMessage = $"Domain '{editModel.Domain}' is already reserved by another tenant.";
                    return;
                }
                await Data.CreateTenantAsync(rec);
            }
            await LoadTenantsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Save failed: {ex.Message}";
        }
    }

    async Task DeleteAsync(Stamps.ManagementPortal.Models.Tenant t)
    {
        try
        {
            await Data.DeleteTenantAsync(t.Id, t.Id);
            await Data.ReleaseDomainAsync(t.Domain);
            await LoadTenantsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Delete failed: {ex.Message}";
        }
    }
}
