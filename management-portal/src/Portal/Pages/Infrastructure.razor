@page "/infrastructure"
@using Stamps.ManagementPortal.Models
@using Stamps.ManagementPortal.Services
@using Microsoft.JSInterop
@inject Stamps.ManagementPortal.Services.IDataService Data
@inject AzureInfrastructureService AzureInfrastructureService
@inject ILogger<Infrastructure> Logger
@inject IJSRuntime JSRuntime

<div class="infrastructure-container">
    <div class="page-header">
        <h1>üèóÔ∏è Infrastructure Discovery</h1>
        <p class="lead">Real-time view of your Azure Stamps infrastructure across all regions</p>
        
        <div class="header-actions">
            <button class="btn btn-primary" @onclick="RefreshInfrastructure">
                <i class="fas fa-sync-alt"></i> Discover Infrastructure
            </button>
            <button class="btn btn-outline-secondary" @onclick="ExportInfrastructureData">
                <i class="fas fa-download"></i> Export
            </button>
        </div>
    </div>

    @if (loading)
    {
        <div class="loading-section">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Discovering infrastructure...</span>
            </div>
            <p class="mt-2">Scanning Azure subscriptions for Stamps pattern resources...</p>
        </div>
    }
    else
    {
        @if (errorMessages.Any())
        {
            <div class="alert alert-warning mb-4">
                <h6><strong>‚ö†Ô∏è Discovery Issues</strong></h6>
                <ul class="mb-0">
                    @foreach (var error in errorMessages)
                    {
                        <li>@error</li>
                    }
                </ul>
                <small class="mt-2 d-block">The Container App may need Reader permissions on the target subscriptions.</small>
            </div>
        }
        <div class="infrastructure-overview">
            <div class="metrics-row">
                <div class="metric-card">
                    <div class="metric-icon">üåç</div>
                    <div class="metric-content">
                        <div class="metric-value">@discoveredCells.Count</div>
                        <div class="metric-label">Discovered CELLs</div>
                    </div>
                </div>
                
                <div class="metric-card">
                    <div class="metric-icon">üì¶</div>
                    <div class="metric-content">
                        <div class="metric-value">@discoveredResources.Count</div>
                        <div class="metric-label">Azure Resources</div>
                    </div>
                </div>
                
                <div class="metric-card">
                    <div class="metric-icon">üóÇÔ∏è</div>
                    <div class="metric-content">
                        <div class="metric-value">@resourceGroups.Count</div>
                        <div class="metric-label">Resource Groups</div>
                    </div>
                </div>
                
                <div class="metric-card">
                    <div class="metric-icon">üìç</div>
                    <div class="metric-content">
                        <div class="metric-value">@regions.Count</div>
                        <div class="metric-label">Regions</div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5>üèóÔ∏è Discovered CELLs</h5>
                        <small class="text-muted">Last updated: @lastUpdated.ToString("MMM dd, yyyy HH:mm")</small>
                    </div>
                    <div class="card-body">
                        @if (discoveredCells.Any())
                        {
                            <div class="cells-grid">
                                @foreach (var cell in discoveredCells)
                                {
                                    <div class="cell-card @(cell.IsHealthy ? "healthy" : "unhealthy")">
                                        <div class="cell-header">
                                            <h6>@cell.Name</h6>
                                            <span class="badge badge-@(cell.IsHealthy ? "success" : "danger")">@cell.Status</span>
                                        </div>
                                        
                                        <div class="cell-details">
                                            <div class="detail-row">
                                                <span class="label">Region:</span>
                                                <span class="value">@cell.Region</span>
                                            </div>
                                            <div class="detail-row">
                                                <span class="label">Resource Group:</span>
                                                <span class="value">@cell.ResourceGroup</span>
                                            </div>
                                            <div class="detail-row">
                                                <span class="label">Capacity:</span>
                                                <span class="value">@cell.CapacityUsed / @cell.CapacityTotal (@cell.UtilizationPercentage.ToString("F1")%)</span>
                                            </div>
                                            <div class="detail-row">
                                                <span class="label">Resources:</span>
                                                <span class="value">@string.Join(", ", cell.ResourceTypes.Take(3))@(cell.ResourceTypes.Count > 3 ? "..." : "")</span>
                                            </div>
                                        </div>
                                        
                                        <div class="cell-actions">
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewCellDetails(cell.Id)">
                                                View Details
                                            </button>
                                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => OpenInAzurePortal(cell.ResourceGroup)">
                                                Azure Portal
                                            </button>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="empty-state">
                                <div class="empty-icon">üîç</div>
                                <h6>No Infrastructure Discovered</h6>
                                <p>Click "Discover Infrastructure" to scan your Azure subscriptions for Stamps pattern resources.</p>
                            </div>
                        }
                    </div>
                </div>
                
                <div class="card mt-3">
                    <div class="card-header">
                        <h5>üì¶ Resource Breakdown</h5>
                    </div>
                    <div class="card-body">
                        @if (resourceTypeBreakdown.Any())
                        {
                            <div class="resource-breakdown">
                                @foreach (var resourceType in resourceTypeBreakdown.Take(10))
                                {
                                    <div class="resource-type-item">
                                        <div class="resource-type-name">@GetFriendlyResourceTypeName(resourceType.Key)</div>
                                        <div class="resource-type-count">@resourceType.Value</div>
                                        <div class="resource-type-bar">
                                            <div class="resource-type-fill" style="width: @(resourceType.Value * 100.0 / resourceTypeBreakdown.Values.Max())%"></div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <p class="text-muted">No resources discovered yet.</p>
                        }
                    </div>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5>üìç Regional Distribution</h5>
                    </div>
                    <div class="card-body">
                        @if (regions.Any())
                        {
                            <div class="regions-list">
                                @foreach (var region in regions)
                                {
                                    var cellsInRegion = discoveredCells.Where(c => c.Region == region).ToList();
                                    <div class="region-item">
                                        <div class="region-header">
                                            <strong>@region.ToUpper()</strong>
                                            <span class="badge badge-secondary">@cellsInRegion.Count CELLs</span>
                                        </div>
                                        <div class="region-cells">
                                            @foreach (var cell in cellsInRegion)
                                            {
                                                <div class="region-cell">
                                                    <span class="status-dot @(cell.IsHealthy ? "healthy" : "unhealthy")"></span>
                                                    <span class="cell-name">@cell.Name</span>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <p class="text-muted">No regions discovered yet.</p>
                        }
                    </div>
                </div>
                
                <div class="card mt-3">
                    <div class="card-header">
                        <h5>‚ö° Quick Actions</h5>
                    </div>
                    <div class="card-body">
                        <div class="quick-actions">
                            <button class="btn btn-outline-primary btn-block mb-2" @onclick="RefreshInfrastructure">
                                üîÑ Refresh Discovery
                            </button>
                            <button class="btn btn-outline-info btn-block mb-2" @onclick="ViewHealthDashboard">
                                üìä Health Dashboard
                            </button>
                            <button class="btn btn-outline-warning btn-block" @onclick="ScheduleDiscovery">
                                ‚è∞ Schedule Auto-Discovery
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .infrastructure-container { padding: 1rem; }
    
    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding: 2rem;
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: white;
        border-radius: 12px;
    }
    
    .header-actions {
        display: flex;
        gap: 0.5rem;
    }
    
    .loading-section {
        text-align: center;
        padding: 3rem;
    }
    
    .metrics-row {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-bottom: 2rem;
    }
    
    .metric-card {
        background: white;
        border-radius: 8px;
        padding: 1.5rem;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        display: flex;
        align-items: center;
        gap: 1rem;
    }
    
    .metric-icon { font-size: 2.5rem; }
    
    .metric-value {
        font-size: 2rem;
        font-weight: bold;
        color: #28a745;
        line-height: 1;
    }
    
    .metric-label {
        color: #6c757d;
        font-size: 0.9rem;
        margin-top: 0.25rem;
    }
    
    .cells-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1rem;
    }
    
    .cell-card {
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 1rem;
        transition: all 0.2s;
    }
    
    .cell-card.healthy { border-left: 4px solid #28a745; }
    .cell-card.unhealthy { border-left: 4px solid #dc3545; }
    
    .cell-card:hover {
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        transform: translateY(-2px);
    }
    
    .cell-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }
    
    .cell-header h6 {
        margin: 0;
        color: #495057;
    }
    
    .cell-details {
        margin-bottom: 1rem;
    }
    
    .detail-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
    }
    
    .detail-row .label {
        font-weight: 600;
        color: #6c757d;
    }
    
    .detail-row .value {
        color: #495057;
    }
    
    .cell-actions {
        display: flex;
        gap: 0.5rem;
    }
    
    .empty-state {
        text-align: center;
        padding: 3rem;
    }
    
    .empty-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
    }
    
    .resource-breakdown {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }
    
    .resource-type-item {
        display: flex;
        align-items: center;
        gap: 1rem;
    }
    
    .resource-type-name {
        flex: 1;
        font-size: 0.9rem;
        color: #495057;
    }
    
    .resource-type-count {
        font-weight: 600;
        color: #28a745;
        min-width: 2rem;
        text-align: right;
    }
    
    .resource-type-bar {
        flex: 1;
        height: 6px;
        background: #e9ecef;
        border-radius: 3px;
        overflow: hidden;
    }
    
    .resource-type-fill {
        height: 100%;
        background: #28a745;
        transition: width 0.3s ease;
    }
    
    .regions-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }
    
    .region-item {
        border: 1px solid #e9ecef;
        border-radius: 6px;
        padding: 1rem;
    }
    
    .region-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
    }
    
    .region-cells {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }
    
    .region-cell {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .status-dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
    }
    
    .status-dot.healthy { background-color: #28a745; }
    .status-dot.unhealthy { background-color: #dc3545; }
    
    .cell-name {
        font-size: 0.9rem;
        color: #6c757d;
    }
    
    .quick-actions .btn {
        text-align: left;
    }
</style>

@code {
    private bool loading = false;
    private DateTime lastUpdated = DateTime.Now;
    
    private List<DiscoveredCell> discoveredCells = new List<DiscoveredCell>();
    private List<DiscoveredResource> discoveredResources = new List<DiscoveredResource>();
    private Dictionary<string, int> resourceTypeBreakdown = new Dictionary<string, int>();
    private List<string> regions = new List<string>();
    private List<string> resourceGroups = new List<string>();
    private List<string> errorMessages = new List<string>();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadInfrastructureData();
    }
    
    private async Task LoadInfrastructureData()
    {
        loading = true;
        try
        {
            // Call the real Azure Infrastructure Discovery Function
            await LoadRealDiscoveryData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load real discovery data: {ex.Message}");
            // Fallback to empty data - no seeded/simulated data
            discoveredCells = new List<DiscoveredCell>();
            discoveredResources = new List<DiscoveredResource>();
            resourceTypeBreakdown = new Dictionary<string, int>();
            regions = new List<string>();
            resourceGroups = new List<string>();
        }
        finally
        {
            loading = false;
            lastUpdated = DateTime.Now;
        }
    }
    
    private async Task LoadRealDiscoveryData()
    {
        try
        {
            Logger.LogInformation("Starting real Azure infrastructure discovery...");
            
            // Use the Azure Infrastructure Service to discover real resources
            var infrastructureData = await AzureInfrastructureService.DiscoverInfrastructureAsync();
            
            // Update the UI with real data
            discoveredCells = infrastructureData.Cells;
            discoveredResources = infrastructureData.Resources;
            resourceTypeBreakdown = infrastructureData.ResourceTypeBreakdown;
            regions = infrastructureData.Regions;
            resourceGroups = infrastructureData.ResourceGroups;
            errorMessages = infrastructureData.ErrorMessages;
            
            Logger.LogInformation($"Discovery completed: {discoveredResources.Count} resources found across {regions.Count} regions");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to discover Azure infrastructure");
            
            // Show error state but don't fall back to fake data
            discoveredCells = new List<DiscoveredCell>();
            discoveredResources = new List<DiscoveredResource>();
            resourceTypeBreakdown = new Dictionary<string, int>();
            regions = new List<string> { "westus2", "westus3" }; // Expected regions
            resourceGroups = new List<string>();
            errorMessages = new List<string> { $"Failed to discover Azure infrastructure: {ex.Message}" };
            
            // Optionally show error message to user
            await JSRuntime.InvokeVoidAsync("alert", $"Failed to discover Azure infrastructure: {ex.Message}");
        }
    }    private async Task RefreshInfrastructure()
    {
        loading = true;
        StateHasChanged();
        
        try
        {
            await LoadInfrastructureData(); // Call real discovery data
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }
    
    private async Task ExportInfrastructureData()
    {
        // TODO: Export infrastructure data to CSV/JSON
        await JSRuntime.InvokeVoidAsync("alert", "Export functionality coming soon!");
    }
    
    private async Task ViewCellDetails(string cellId)
    {
        // TODO: Navigate to detailed cell view
        await JSRuntime.InvokeVoidAsync("alert", $"Cell details for {cellId} coming soon!");
    }
    
    private async Task OpenInAzurePortal(string resourceGroup)
    {
        var portalUrl = $"https://portal.azure.com/#@/resource/subscriptions/{{subscription-id}}/resourceGroups/{resourceGroup}/overview";
        await JSRuntime.InvokeVoidAsync("open", portalUrl, "_blank");
    }
    
    private async Task ViewHealthDashboard()
    {
        await JSRuntime.InvokeVoidAsync("alert", "Health dashboard coming soon!");
    }
    
    private async Task ScheduleDiscovery()
    {
        await JSRuntime.InvokeVoidAsync("alert", "Auto-discovery scheduling coming soon!");
    }
    
    private string GetFriendlyResourceTypeName(string resourceType)
    {
        return resourceType switch
        {
            "Microsoft.Web/sites" => "App Services",
            "Microsoft.Sql/servers" => "SQL Servers",
            "Microsoft.App/containerApps" => "Container Apps",
            "Microsoft.Storage/storageAccounts" => "Storage Accounts",
            "Microsoft.Network/applicationGateways" => "Application Gateways",
            "Microsoft.KeyVault/vaults" => "Key Vaults",
            _ => resourceType.Split('/').Last()
        };
    }
}
