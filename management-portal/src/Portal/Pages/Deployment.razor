@page "/deployment"
@using Portal.Services
@inject AspireOrchestrationService OrchestrationService
@inject ILogger<Deployment> Logger
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="h3 mb-3">
                <i class="fas fa-rocket"></i>
                Aspire Deployment Orchestration
            </h1>
            <p class="text-muted">Generate deployment plans and Aspire manifests for production deployments.</p>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-cogs"></i>
                        Deployment Plan Generation
                    </h5>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <p class="mb-0">Generate a comprehensive deployment plan based on discovered Azure infrastructure.</p>
                        <button class="btn btn-primary" @onclick="GenerateDeploymentPlan" disabled="@isGenerating">
                            @if (isGenerating)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Generating...</span>
                            }
                            else
                            {
                                <i class="fas fa-magic me-2"></i>
                                <span>Generate Deployment Plan</span>
                            }
                        </button>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(generationMessage))
                    {
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            @generationMessage
                        </div>
                    }
                    
                    @if (generationError != null)
                    {
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <strong>Generation Error:</strong> @generationError
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (deploymentPlan != null)
    {
        <div class="row">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-success text-white">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-file-alt"></i>
                            Deployment Plan - @deploymentPlan.Environment (@deploymentPlan.DeploymentMode)
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <h6><i class="fas fa-info-circle me-2"></i>Plan Overview</h6>
                                <ul class="list-unstyled ms-3">
                                    <li><strong>Environment:</strong> @deploymentPlan.Environment</li>
                                    <li><strong>Mode:</strong> @deploymentPlan.DeploymentMode</li>
                                    <li><strong>Generated:</strong> @deploymentPlan.GeneratedAt.ToString("yyyy-MM-dd HH:mm:ss") UTC</li>
                                    <li><strong>Azure Services:</strong> @(deploymentPlan.EnableAzureServices ? "Enabled" : "Disabled")</li>
                                    <li><strong>Local Emulator:</strong> @(deploymentPlan.UseLocalEmulator ? "Yes" : "No")</li>
                                </ul>
                            </div>
                            <div class="col-md-6">
                                <h6><i class="fas fa-cubes me-2"></i>Services Configuration</h6>
                                <ul class="list-unstyled ms-3">
                                    @foreach (var service in deploymentPlan.ServiceConfigurations)
                                    {
                                        <li>
                                            <strong>@service.ServiceName</strong> (@service.ServiceType)
                                            <span class="badge bg-secondary ms-2">@service.Replicas replicas</span>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>

                        @if (deploymentPlan.DiscoveredInfrastructure != null)
                        {
                            <div class="row mb-4">
                                <div class="col-12">
                                    <h6><i class="fas fa-cloud me-2"></i>Discovered Infrastructure</h6>
                                    <div class="row">
                                        <div class="col-md-4">
                                            <div class="card border-start border-5 border-info">
                                                <div class="card-body">
                                                    <h6 class="card-title">Resource Groups</h6>
                                                    <ul class="list-unstyled small">
                                                        @foreach (var rg in deploymentPlan.DiscoveredInfrastructure.ResourceGroups)
                                                        {
                                                            <li><i class="fas fa-folder me-1"></i>@rg</li>
                                                        }
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="card border-start border-5 border-warning">
                                                <div class="card-body">
                                                    <h6 class="card-title">Regions</h6>
                                                    <ul class="list-unstyled small">
                                                        @foreach (var region in deploymentPlan.DiscoveredInfrastructure.Regions)
                                                        {
                                                            <li><i class="fas fa-map-marker-alt me-1"></i>@region</li>
                                                        }
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="card border-start border-5 border-success">
                                                <div class="card-body">
                                                    <h6 class="card-title">Cosmos DB Instances</h6>
                                                    <ul class="list-unstyled small">
                                                        @foreach (var cosmos in deploymentPlan.DiscoveredInfrastructure.CosmosInstances)
                                                        {
                                                            <li>
                                                                <i class="fas fa-database me-1"></i>@cosmos.AccountName
                                                                @if (cosmos.HasStampsControlPlane)
                                                                {
                                                                    <span class="badge bg-success">Control Plane</span>
                                                                }
                                                            </li>
                                                        }
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="row">
                            <div class="col-12">
                                <div class="d-flex gap-2">
                                    <button class="btn btn-outline-primary" @onclick="GenerateAspireManifest" disabled="@isGeneratingManifest">
                                        @if (isGeneratingManifest)
                                        {
                                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                        }
                                        else
                                        {
                                            <i class="fas fa-file-code me-1"></i>
                                        }
                                        Generate Aspire Manifest
                                    </button>
                                    <button class="btn btn-outline-secondary" @onclick="ExportDeploymentPlan">
                                        <i class="fas fa-download me-1"></i>
                                        Export Plan
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(aspireManifest))
    {
        <div class="row mt-4">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-info text-white">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-file-code"></i>
                            Generated Aspire Manifest
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <p class="mb-0">Save this manifest as <code>aspire-manifest.json</code> for deployment.</p>
                            <button class="btn btn-outline-primary btn-sm" @onclick="CopyManifestToClipboard">
                                <i class="fas fa-copy me-1"></i>
                                Copy to Clipboard
                            </button>
                        </div>
                        <pre class="bg-light p-3 rounded border" style="max-height: 400px; overflow-y: auto;"><code>@aspireManifest</code></pre>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private AspireDeploymentPlan? deploymentPlan;
    private bool isGenerating = false;
    private bool isGeneratingManifest = false;
    private string? generationMessage;
    private string? generationError;
    private string? aspireManifest;

    private async Task GenerateDeploymentPlan()
    {
        isGenerating = true;
        generationError = null;
        generationMessage = "Analyzing Azure infrastructure and generating deployment plan...";
        StateHasChanged();

        try
        {
            deploymentPlan = await OrchestrationService.GenerateDeploymentPlanAsync();
            
            if (deploymentPlan.Errors.Any())
            {
                generationError = string.Join("; ", deploymentPlan.Errors);
                generationMessage = null;
            }
            else
            {
                generationMessage = $"Deployment plan generated successfully for {deploymentPlan.Environment} environment. " +
                    $"Found {deploymentPlan.ServiceConfigurations.Count} services and {deploymentPlan.HealthChecks.Count} health checks.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to generate deployment plan");
            generationError = ex.Message;
            generationMessage = null;
        }
        finally
        {
            isGenerating = false;
            StateHasChanged();
        }
    }

    private async Task GenerateAspireManifest()
    {
        if (deploymentPlan == null) return;

        isGeneratingManifest = true;
        StateHasChanged();

        try
        {
            aspireManifest = await OrchestrationService.GenerateAspireManifestAsync(deploymentPlan);
            Logger.LogInformation("Generated Aspire manifest for deployment plan");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to generate Aspire manifest");
            generationError = $"Failed to generate Aspire manifest: {ex.Message}";
        }
        finally
        {
            isGeneratingManifest = false;
            StateHasChanged();
        }
    }

    private async Task ExportDeploymentPlan()
    {
        if (deploymentPlan == null) return;

        var json = System.Text.Json.JsonSerializer.Serialize(deploymentPlan, new System.Text.Json.JsonSerializerOptions
        {
            WriteIndented = true,
            PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase
        });

        await JSRuntime.InvokeVoidAsync("downloadFile", $"deployment-plan-{deploymentPlan.Environment}.json", json);
    }

    private async Task CopyManifestToClipboard()
    {
        if (!string.IsNullOrEmpty(aspireManifest))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", aspireManifest);
            await JSRuntime.InvokeVoidAsync("alert", "Aspire manifest copied to clipboard!");
        }
    }
}

<script>
    window.downloadFile = (filename, content) => {
        const element = document.createElement('a');
        element.setAttribute('href', 'data:application/json;charset=utf-8,' + encodeURIComponent(content));
        element.setAttribute('download', filename);
        element.style.display = 'none';
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
    };
</script>
