@page "/operations"
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject Stamps.ManagementPortal.Services.IDataService Data

<h1>Operations</h1>

<EditForm Model="edit" OnValidSubmit="OnSaveAsync">
    <DataAnnotationsValidator />
    <div class="form-grid">
        <input @bind="edit.Id" placeholder="Id" />
        <input @bind="edit.TenantId" placeholder="Tenant Id" />
        <input @bind="edit.Type" placeholder="Type" />
        <input @bind="edit.Status" placeholder="Status" />
        <input type="datetime-local" @bind-value="edit.CreatedAtLocal" />
    </div>
    <button type="submit">Save</button>
    <button type="button" @onclick="NewAsync">New</button>
    <span class="hint">CRUD requires GraphQL/DAB to be enabled</span>
</EditForm>

@if (loading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-warning">
        <strong>Data Service Unavailable:</strong> @errorMessage
        <br />
        <small>This feature requires the DAB (Data API Builder) service to be running and properly configured.</small>
        <br />
        <button class="btn btn-link" @onclick="RetryLoadAsync">Retry</button>
    </div>
}
else if (ops is null || !ops.Any())
{
    <div class="alert alert-info">
        <strong>No Operations Found</strong>
        <br />
        <small>Operations will appear here as tenants are managed and cells are provisioned.</small>
    </div>
}
else
{
    <table>
        <thead>
            <tr><th>Id</th><th>Tenant</th><th>Type</th><th>Status</th><th>Created</th></tr>
        </thead>
        <tbody>
        @foreach (var o in ops)
        {
            <tr>
                <td>@o.Id</td>
                <td>@o.TenantId</td>
                <td>@o.Type</td>
                <td>@o.Status</td>
                <td>@o.CreatedAt.ToLocalTime()</td>
                <td>
                    <button @onclick="() => Edit(o)">Edit</button>
                    <button @onclick="() => DeleteAsync(o)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IReadOnlyList<Stamps.ManagementPortal.Models.Operation>? ops;
    private OperationEdit edit = new();
    private bool loading = true;
    private string? errorMessage;

    class OperationEdit
    {
        public string Id { get; set; } = string.Empty;
        public string TenantId { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public DateTimeOffset CreatedAt { get; set; } = DateTimeOffset.UtcNow;
        public DateTime CreatedAtLocal
        {
            get => CreatedAt.LocalDateTime;
            set => CreatedAt = new DateTimeOffset(value, DateTimeOffset.Now.Offset);
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadOperationsAsync();
    }

    async Task LoadOperationsAsync()
    {
        try
        {
            loading = true;
            errorMessage = null;
            ops = await Data.GetOperationsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            ops = new List<Stamps.ManagementPortal.Models.Operation>();
        }
        finally
        {
            loading = false;
        }
    }

    async Task RetryLoadAsync()
    {
        await LoadOperationsAsync();
    }

    void Edit(Stamps.ManagementPortal.Models.Operation o)
        => edit = new OperationEdit { Id = o.Id, TenantId = o.TenantId, Type = o.Type, Status = o.Status, CreatedAt = o.CreatedAt };
    
    Task NewAsync() { edit = new OperationEdit(); return Task.CompletedTask; }

    async Task OnSaveAsync()
    {
        try
        {
            var rec = new Stamps.ManagementPortal.Models.Operation(edit.Id, edit.TenantId, edit.Type, edit.Status, edit.CreatedAt);
            if (ops?.Any(x => x.Id == rec.Id) == true)
                await Data.UpdateOperationAsync(rec);
            else
                await Data.CreateOperationAsync(rec);
            await LoadOperationsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Save failed: {ex.Message}";
        }
    }

    async Task DeleteAsync(Stamps.ManagementPortal.Models.Operation o)
    {
        try
        {
            await Data.DeleteOperationAsync(o.Id, o.TenantId);
            await LoadOperationsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Delete failed: {ex.Message}";
        }
    }
}
