@page "/cells"
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject Stamps.ManagementPortal.Services.IDataService Data

<h1>Cells</h1>

<EditForm Model="edit" OnValidSubmit="OnSaveAsync">
    <DataAnnotationsValidator />
    <div class="form-grid">
        <input @bind="edit.Id" placeholder="Id" />
        <input @bind="edit.Region" placeholder="Region" />
        <input @bind="edit.AvailabilityZone" placeholder="AZ" />
        <input @bind="edit.Status" placeholder="Status" />
        <input type="number" @bind-value="edit.CapacityUsed" placeholder="Used" />
        <input type="number" @bind-value="edit.CapacityTotal" placeholder="Total" />
    </div>
    <button type="submit">Save</button>
    <button type="button" @onclick="NewAsync">New</button>
    <span class="hint">CRUD requires GraphQL/DAB to be enabled</span>
</EditForm>

@if (loading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-warning">
        <strong>Data Service Unavailable:</strong> @errorMessage
        <br />
        <small>This feature requires the DAB (Data API Builder) service to be running and properly configured.</small>
        <br />
        <button class="btn btn-link" @onclick="RetryLoadAsync">Retry</button>
    </div>
}
else if (cells is null || !cells.Any())
{
    <div class="alert alert-info">
        <strong>No Cells Found</strong>
        <br />
        <small>Create your first cell using the form above.</small>
    </div>
}
else
{
    <table>
        <thead>
            <tr><th>Id</th><th>Region</th><th>AZ</th><th>Status</th><th>Utilization</th></tr>
        </thead>
        <tbody>
        @foreach (var c in cells)
        {
            <tr>
                <td>@c.Id</td>
                <td>@c.Region</td>
                <td>@c.AvailabilityZone</td>
                <td>@c.Status</td>
                <td>@c.CapacityUsed/@c.CapacityTotal</td>
                <td>
                    <button @onclick="() => Edit(c)">Edit</button>
                    <button @onclick="() => DeleteAsync(c)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IReadOnlyList<Stamps.ManagementPortal.Models.Cell>? cells;
    private CellEdit edit = new();
    private bool loading = true;
    private string? errorMessage;

    class CellEdit
    {
        public string Id { get; set; } = string.Empty;
        public string Region { get; set; } = string.Empty;
        public string AvailabilityZone { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public int CapacityUsed { get; set; }
        public int CapacityTotal { get; set; }
    }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadCellsAsync();
    }

    async Task LoadCellsAsync()
    {
        try
        {
            loading = true;
            errorMessage = null;
            cells = await Data.GetCellsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            cells = new List<Stamps.ManagementPortal.Models.Cell>();
        }
        finally
        {
            loading = false;
        }
    }

    async Task RetryLoadAsync()
    {
        await LoadCellsAsync();
    }

    void Edit(Stamps.ManagementPortal.Models.Cell c)
        => edit = new CellEdit { Id = c.Id, Region = c.Region, AvailabilityZone = c.AvailabilityZone, Status = c.Status, CapacityUsed = c.CapacityUsed, CapacityTotal = c.CapacityTotal };
    
    Task NewAsync() { edit = new CellEdit(); return Task.CompletedTask; }

    async Task OnSaveAsync()
    {
        try
        {
            var rec = new Stamps.ManagementPortal.Models.Cell(edit.Id, edit.Region, edit.AvailabilityZone, edit.Status, edit.CapacityUsed, edit.CapacityTotal);
            if (cells?.Any(x => x.Id == rec.Id) == true)
                await Data.UpdateCellAsync(rec);
            else
                await Data.CreateCellAsync(rec);
            await LoadCellsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Save failed: {ex.Message}";
        }
    }

    async Task DeleteAsync(Stamps.ManagementPortal.Models.Cell c)
    {
        try
        {
            await Data.DeleteCellAsync(c.Id, c.Id);
            await LoadCellsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Delete failed: {ex.Message}";
        }
    }
}
